project1

a) sm4.cpp：SM4基础的软件实现。我们定义并设计了循环移位函数rotl()、加解密合成变换T()、密钥扩展合成变换T_prime()、密钥扩展函数key_schedule()、解密函数sm4_crypt()；另外我们设计了对于SM4软件实现的正确性测试，随机生成明文和密钥，通过对加密后的解密结果与原始明文的对比来验证是否正确；以及性能测试，对于随机生成的大量明文进行加密，测算单次加密用时，及其吞吐量（用MB/s表示）。
注：我们实现了加解密功能，但在测试中没有输出具体的案例，如有必要可以选择输出。
sm4-opt1.cpp：opt，即optimization，对SM4软件实现的优化。在实现的基础上，主要进行了T-table优化、AES-NI加速、循环展开。其中，T-Table优化定义了T查找表构造函数init_tables()，预计算4个8x32 SBox（共4KB），将线性变换合并到查表操作中，减少了75%的位移操作；AES-NI加速则使用了_mm_aesenclast_si128指令，通过GF(2⁸)同构映射利用AES指令集来加速计算；另外我们对32轮加密进行了完全展开，从而消除了循环控制开销，便于编译器进行指令级并行优化。
优化后，效率提升为约两倍，运行时间减少约一半。
sm4-opt2.cpp：对SM4软件实现进行进一步优化。这里我们主要进行了SIMD并行优化和多线程优化。其中，SIMB优化使用AVX2的256位寄存器(YMM)同时处理8个SM4块，同时，我们为SIMD操作专门优化了4KBx8通道查找表，以及将指令向量化(_mm256_xor_si256：并行异或操作；_mm256_i32gather_epi32：并行查表；_mm256_srli_epi32：并行移位)；我们还进行了多线程优化，有助于提升效率。使用以下命令进行编译：
g++ -O3 -march=native -maes -mavx2 sm4-opt2.cpp -o sm4-opt.exe
运行后效率应有显著提升。但，本机不知为何无法使用AVX2，因此未观测到预期结果。

b）SM4-GCM.cpp：实现了基于SM4分组密码的GCM工作模式，包含加密、解密和认证功能。GHASH类：实现Galois域认证乘法及认证标签计算；ctr_crypt()：CTR计数器模式加密/解密（调用sm4_crypt）；sm4_gcm_encrypt()：对明文进行GCM加密，输出密文和认证标签；sm4_gcm_decrypt()：对密文进行GCM解密并验证标签，返回认证结果。
编译方式：g++ -O3 -march=native -maes SM4-GCM.cpp -o SM4-GCM

22密码2班 梁钰舜 202200460175